#!/bin/sh
#
# This scripts performs making a debian root file system
# 
# 
# Additional packages for VM:
#   * curl
#   * htop
#   * subversion
#   * tree
#   * vim
#   * wireless-crda
#

THIS=$0
CWD=$(dirname $THIS)

. $CWD/env

chkpkg debootstrap


ARCH=$(arch)
SUITE=
FORMAT=
MIRROR=
KERNEL=
TARBALL=
VARIANT=
TARBALL=
INCLUDES=
EXCLUDES=
HOSTNAME=
COMPONENTS=

usage() { echo "Usage: $THIS OPTIONS"
    echo ""
    echo "OPTIONS:"
    echo "  --variant=VARIANT           Available debian variant"
    echo "  --arch=ARCH                 The target arch, default is the same as host arch"
    echo "  --suite=SUITE               Available suite of the specified debian variant"
    echo "  --components=COMPONENTS     Comma seperated commponent list"
    echo "  --include=PACKAGES          Comma seperated package list which to install"
    echo "  --exclude=PACKAGES          Comma seperated package list which to uninstall"
    echo "  --mirror=MIRROR             The mirror url to download packages"
    echo "  --host=HOSTNAME             The host name"
    echo "  --kerel=KERNEL              Kernel version to install"
    echo "  --format=FORMAT             The format of root fs partition"
    exit 1
}

quit() {
    echo $*
    exit 1
}

mktarball() {
    debootstrap \
        --verbose \
        --arch=$ARCH \
        --variant=$VARIANT \
        --make-tarball=$TARBALL \
        $COMPONENTS $MIRROR $SUITE ${SUITE}-${ARCH}
}

untarball() {
    echo "Unpacking $PWD/$TARBALL ..."

    debootstrap \
        --verbose \
        --arch=$ARCH \
        --variant=$VARIANT \
        --unpack-tarball=$PWD/$TARBALL \
        $COMPONENTS $MIRROR $SUITE ${SUITE}-${ARCH}
}

#
# Read options
#
while [ $# -ne 0 ]; do
    case $1 in
        --arch=*)
            ARCH="${1#*--arch=}"
            ;;
        --suite=*)
            SUITE="${1#*--suite=}"
            ;;
        --variant=*)
            VARIANT="${1#*--variant=}"
            ;;
        --components=*)
            COMPONENTS="--components=${1#*--components=}"
            ;;
        --include=*)
            INCLUDES="`echo ${1#*--include=} | sed 's/,/ /g'`"
            ;;
        --exclude=*)
            EXCLUDES="`echo ${1#*--include=} | sed 's/,/ /g'`"
            ;;
        --mirror=*)
            MIRROR="--mirror=${1#*--mirror=}"
            ;;
        --host=*)
            HOST="${1#*--host=}"
            ;;
        --format=*)
            FORMAT="${1#*--format=}"
            ;;
        --kernel=*)
            KERNEL="${1#*--kernel=}"
            ;;
        *)
            echo "Unknown option $1"
            usage
            ;;
    esac
    shift
done

#
# Check required options
#
[ -z "$VARIANT" ] && [ -z "$SUITE" ] && usage

NBDDISK=
ROOTDIR=${SUITE}-${ARCH}
ROOTIMG=${ROOTDIR}.img
TARBALL=${VARIANT}-${ROOTDIR}.tgz
CHROOT="chroot $ROOTDIR"

kvm-img create -f raw $ROOTIMG 4G || quit "Create image file failed"

modprobe nbd max_part=16 || quit "Load NBD module into kernel failed"

# Search available NBD device
for i in /dev/nbd*; do
    if [ kvm-nbd --connect $i $ROOTIMG ]; then
        NBDDISK=$i
        break
    fi
done

[ -z "$NBDDISK" ] && quit "No NBD device found"

sfdisk $NBDDISK -D -uM << EOF || quit "Create partitions failed"
,512,83,*
;
EOF

#
# Format disk partitions
#
mkfs.ext4 -q ${NBDDISK}p1 || quit "Can't create /boot ext4"
mkfs.ext4 -q ${NBDDISK}p2 || quit "Can't create / ext4"

#
# Mount root partition
#
mkdir -p $ROOTDIR
mount ${NBDDISK}p2 $ROOTDIR || quit "Mount / to $ROOTDIR failed"

#
# Use the local tarball if it exists
#
if [ ! -f "$PWD/$TARBALL" ]; then
    mktarball && untarball || exit
else
    untarball || exit
fi

#
# Configure system environment
#
echo "Configuring system ..."

# Configure fstab
cat << EOF > $ROOTDIR/etc/fstab
/dev/vda1 /boot          ext4 sync              0 2
/dev/vda2 /              ext4 errors=remount-ro 0 1
EOF

# Configure hostname
echo $HOSTNAME > $ROOTDIR/etc/hostname

# Configure hosts
cat << EOF > $ROOTDIR/etc/hosts
127.0.0.1       localhost
127.0.0.1       $HOSTNAME
EOF

# Configure network interface
cat << EOF > $ROOTDIR/etc/network/interfaces
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet dhcp
EOF

cp /etc/kernel-img.conf $ROOTDIR/etc/kernel-img.conf

# Configure locale
echo "en_US.UTF-8 UTF-8" > $ROOTDIR/etc/locale.gen

# Configure apt source
echo "deb http://security.ubuntu.com/ubuntu lucid-security main" >> $ROOTDIR/etc/apt/sources.list

mount -o bind /dev/    $ROOTDIR/dev

$CHROOT mount -t proc  none /proc || fail "Mount /proc failed"
$CHROOT mount -t sysfs none /sys  || fail "Mount /sys failed"


$CHROOT locale-gen
$CHROOT apt-get update
$CHROOT apt-get -y --force-yes -f install
$CHROOT apt-get -y --force-yes upgrade
$CHROOT apt-get -y --force-yes install grub
$CHROOT apt-get -y --force-yes install linux-image-$(uname -r)

#
# Install packages
#
[ ! -z "$INCLUDES" ] && {
    $CHROOT apt-get -y --force-yes install $INCLUDES
}

#
# Uninstall packages
#
[ ! -z  "$EXCLUDES" ] && {
    $CHROOT apt-get -y --force-yes remove $EXCLUDES
}

#
# Install grub modules
#
$CHROOT grub-install --no-floppy --root-directory=$ROOTDIR --modules="part_msdos ext2" /dev/loop0 || exit 1
$CHROOT grub-mkconfig -o /boot/grub/grub.cfg

[ -f $ROOTDIR/boot/grub/grub.cfg ] && { 
    sed -i -e 's/(\/dev\/loop1)/(hd0,1)/g' \
           -e 's/(\/dev\/loop0)/(hd0,1)/g' \
           -e 's/(loop0)/(hd0,1)/g' \
           $ROOTDIR/boot/grub/grub.cfg
}

umount $ROOTDIR/dev/pts
umount $ROOTDIR/dev
umount $ROOTDIR/proc
umount $ROOTDIR
losetup -d /dev/loop1
losetup -d /dev/loop0

